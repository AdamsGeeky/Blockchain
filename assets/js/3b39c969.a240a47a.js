"use strict";(self.webpackChunksource=self.webpackChunksource||[]).push([[5213],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>g});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(r),d=o,g=u["".concat(s,".").concat(d)]||u[d]||m[d]||a;return r?n.createElement(g,i(i({ref:t},c),{},{components:r})):n.createElement(g,i({ref:t},c))}));function g(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[u]="string"==typeof e?e:o,i[1]=p;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3087:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const a={sidebar_position:7},i="Pointer:",p={unversionedId:"Recources/golang/pointer",id:"Recources/golang/pointer",title:"Pointer:",description:'Pointer type in Go is a type that stores the memory address of a value. It is represented by the " * " symbol followed by the type of the value it points to. For example, a pointer to an integer would be represented as "*int".',source:"@site/docs/Recources/golang/pointer.md",sourceDirName:"Recources/golang",slug:"/Recources/golang/pointer",permalink:"/Blockchain/docs/Recources/golang/pointer",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Recources/golang/pointer.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Data Types",permalink:"/Blockchain/docs/Recources/golang/datatype"},next:{title:"user input/output",permalink:"/Blockchain/docs/Recources/golang/inputOutput"}},s={},l=[{value:"There are several operations that can be performed with pointer types in Go:",id:"there-are-several-operations-that-can-be-performed-with-pointer-types-in-go",level:3}],c={toc:l};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"pointer"},"Pointer:"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Pointer")," type in Go is a type that stores the memory address of a value. It is represented by the ",(0,o.kt)("strong",{parentName:"p"},'" * "')," symbol followed by the type of the value it points to. For example, a pointer to an integer would be represented as ",(0,o.kt)("strong",{parentName:"p"},'"*int"'),"."),(0,o.kt)("h3",{id:"there-are-several-operations-that-can-be-performed-with-pointer-types-in-go"},"There are several operations that can be performed with pointer types in Go:"),(0,o.kt)("p",null,'Assigning a value to a pointer: This is done using the "&" symbol, which returns the memory address of a value. For example:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"intValue := 10\nintPointer := &intValue\n")),(0,o.kt)("p",null,'Dereferencing a pointer: This is done using the "*" symbol, which retrieves the value\nstored at the memory address pointed to by the pointer. For example:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"fmt.Println(*intPointer) // prints 10\n")),(0,o.kt)("p",null,"Changing the value of a pointer: This is done by dereferencing the pointer and assigning a new value to it. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"*intPointer = 15\nfmt.Println(*intPointer) // prints 15\n")),(0,o.kt)("p",null,'Comparing pointers: Pointers can be compared using the "==" and "!=" operators. For example:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'ptr1 := &intValue\nptr2 := &intValue\n\nif ptr1 == ptr2 {\nfmt.Println("Pointers point to the same memory location")\n}\n')),(0,o.kt)("p",null,'Pointer arithmetic: Pointers can be incremented or decremented using the "+" or "-" operators. This can be useful for iterating through arrays or slices. For example:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"slice := []int{1, 2, 3, 4, 5}\nptr := &slice[0]\n\nfor i := 0; i < len(slice); i++ {\nfmt.Println(*ptr)\nptr++\n}\n")),(0,o.kt)("p",null,'Creating a new pointer: A pointer can be created using the "new" function, which allocates memory for a new value and returns a pointer to it. For example:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"ptr := new(int)\n*ptr = 10\nfmt.Println(*ptr) // prints 10\n")),(0,o.kt)("p",null,"a type that holds the memory address of another value"))}u.isMDXComponent=!0}}]);